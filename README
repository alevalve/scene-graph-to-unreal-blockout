# Project: Scene Graph to Unreal Blockout

This project provides a simple pipeline to parse a natural-language scene description into a structured scene-graph JSON, and then build a grey-box level in Unreal Engine using that JSON.

## Directory Structure

```
/Repo
├── parser.py           # CLI tool: prompt → sanitized scene.json
├── BuildScene.py       # Unreal Python script: scene.json → BlockOut.umap
├── run_demo.sh         # End-to-end shell script: installs deps, runs parser, runs Unreal headless build
├── requirements.txt    # Python dependencies (openai)
└── scene.json          # Generated by parser.py or run_demo.sh
```

## Prerequisites

- **Python 3.8+** with `openai` installed (`pip install -r requirements.txt`)
- **Unreal Engine 5.6** (or your version) with the Python plugin enabled
- **UnrealEditor** (or `UnrealEditor-Cmd` on Windows)
- A valid `.uproject` for your Unreal project

---

## 1. Generating JSON Only

If you only need the structured scene-graph JSON, use `parser.py` directly.

```bash
export OPENAI_API_KEY="sk-..."

# Generate scene.json from a prompt (defaults: model gpt-4.1, output scene.json)
python3 parser.py \
  "A cosy loft with a skylight and a rocket-shaped lamp on the bedside table." \
  --model gpt-4.1 \
  --output scene.json

# The file `scene.json` will be written in the current directory.
```

**Arguments**:

- `prompt` (positional): Natural-language description of the scene.
- `--model`, `-m`: OpenAI model to use (default `gpt-4.1`).
- `--output`, `-o`: Path to write the sanitized JSON (default `scene.json`).

---

## 2. Full Pipeline: JSON + Unreal Build

For end-to-end control, use the `run_demo.sh` script.

```bash
chmod +x run_demo.sh

# Run with defaults (prompt & model) and build the Unreal BlockOut.umap
./run_demo.sh

# Or override prompt and model:
./run_demo.sh "A rustic cabin with a round table and vase on top" gpt-4o
```

Before running, edit the top of `run_demo.sh` to configure:

- `UE_BIN`: Path to your UnrealEditor binary
- `UPROJECT`: Full path to your `.uproject`
- `SCRIPTS_DIR`: Usually `$(dirname "$0")`, where `parser.py` and `BuildScene.py` live

The script will:

1. Install Python dependencies via `pip install -r requirements.txt`.
2. Invoke `parser.py` to generate `scene.json`.
3. Launch Unreal headless to run `BuildScene.py` on that JSON.
4. Verify that `BlockOut.umap` is saved under `Content/Maps` in your project.
